@using Progress.Sitefinity.AspNetCore.Web;
@model Progress.Sitefinity.AspNetCore.FormWidgets.ViewModels.FileField.FileFieldViewModel
@inject IRenderContext renderContext;

@{
    var fileFieldUniqueId = Model.FieldName;
    string ariaDescribedByAttribute = string.Empty;
    var fileFieldErrorMessageId = Html.GetUniqueId("FileFieldErrorMessage");
    var labelAdditionalClassList = Model.HasDescription ? "margin-bottom-1" : null;
    @if (Model.HasDescription)
    {
        ariaDescribedByAttribute = $"aria-describedby='{fileFieldUniqueId} {fileFieldErrorMessageId}'";
    }
    else
    {
        ariaDescribedByAttribute = $"aria-describedby='{fileFieldErrorMessageId}'";
    }
}

<script data-sf-role='start_field_@fileFieldUniqueId' data-sf-role-field-name='@fileFieldUniqueId'></script>
<div class="@Model.CssClass mb-3" data-sf-role="file-field-container">
    <label class="h6 d-block @labelAdditionalClassList" for='@fileFieldUniqueId'>@Model.Label</label>
    @if (Model.HasDescription)
    {
        <div id='@Html.GetUniqueId("FileFieldInfo")' class="form-text margin-vertical-1">@Model.InstructionalText</div>
    }
    <input data-sf-role="violation-restrictions" type="hidden" value='@Model.ViolationRestrictionsJson' />
    <div data-sf-role="file-field-inputs">

        @if (renderContext.IsEdit)
        {
            <div data-sf-role="single-file-input">
                <input
                    class="form-control"
                    id='@fileFieldUniqueId'
                    title="@Model.Label"
                    name="@Model.FieldName"
                    type="file"
                    @Html.Raw(ariaDescribedByAttribute)
                    @Html.Raw(Model.ValidationAttributes) />
            </div>
        }

    </div>
    @if (Model.AllowMultipleFiles)
    {
        <button data-sf-role="add-input" class="button secondary margin-vertical-1">+</button>
    }

    @if (Model.Required)
    {
        <div data-sf-role="required-violation-message" class="form-error" role="alert" aria-live="assertive">@Model.RequiredViolationMessage</div>
    }

    @if (!renderContext.IsEdit)
    {
        <script type="text/template" data-sf-role="file-input-template">

        <div data-sf-role="single-file-input-wrapper">
            <div class="flex-container margin-bottom-1" data-sf-role="single-file-input">
                <input
                    class="form-control"
                    id='@fileFieldUniqueId'
                    title="@Model.Label"
                    name="@Model.FieldName"
                    type="file"
                    @Html.Raw(ariaDescribedByAttribute)
                    @Html.Raw(Model.ValidationAttributes) />

                @if (Model.AllowMultipleFiles)
                {
                    <button title="Remove" data-sf-role="remove-input" class="clear button margin-left-1">X</button>
                }
            </div>
            @if (Model.MinFileSizeInMb > 0 || Model.MaxFileSizeInMb > 0)
            {
                        <div data-sf-role="filesize-violation-message" class="form-error margin-vertical-1" role="alert" aria-live="assertive">@Model.FileSizeViolationMessage</div>
            }
            @if (Model.AllowedFileTypes != null)
            {
                        <div data-sf-role="filetype-violation-message" class="form-error margin-vertical-1" role="alert" aria-live="assertive">@Model.FileTypeViolationMessage</div>
            }
        </div>

        </script>
    }
</div>
<script data-sf-role='end_field_@fileFieldUniqueId'></script>
