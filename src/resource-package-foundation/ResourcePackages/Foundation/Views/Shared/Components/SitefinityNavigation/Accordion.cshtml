@using Progress.Sitefinity.AspNetCore.TagHelpers;
@using Progress.Sitefinity.AspNetCore.Widgets.Models.Navigation;
@using Progress.Sitefinity.AspNetCore.Models;

@model Progress.Sitefinity.AspNetCore.Widgets.Models.Navigation.NavigationViewModel


@{
    var accordionId = Html.GetUniqueId("accordion");
}

<div class="row">
    <ul class="accordion" id="@accordionId" data-accordion data-multi-expand="true" @Html.BuildAttributes(Model.Attributes)>
        @foreach (var node in Model.Nodes)
        {
            RenderRootLevelNode(node);
        }
    </ul>
</div>

@*Here is specified the rendering for the root level*@
@{ void RenderRootLevelNode(PageViewModel node)
    {
        <div class="accordion-item" data-accordion-item>
            @{ if (node.ChildNodes.Count > 0)
                {
                    var headingId = Html.GetUniqueId($"heading-{node.Key}");
                    var coolapseId = Html.GetUniqueId($"collapse-{node.Key}");
                    <h2 id='headingId'>
                    <a title="@node.Title" class="text-truncate" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
                        @if (node.PageSiteMapNode.PageType != PageType.Group)
                        {
                            <a title="@node.Title" class="text-truncate" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
                        }
                        </h2>
                    
                    <div id='@coolapseId' class="@GetAccordeonContentStateClass(node)" aria-labelledby='@headingId' data-bs-parent="#@accordionId">
                        <div class="accordion-body">
                            @{RenderSubLevelsRecursive(node);}
                        </div>
                    </div>
                }
                else
                {
                    <h2 class="accordion-title">
                            <a title="@node.Title" class="text-truncate" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
                    </h2>
                }
            }
        </div>
    }
}

@*Here is specified the rendering for all child levels*@
@{ void RenderSubLevelsRecursive(PageViewModel node, bool nested = false)
    {
        @if (node.ChildNodes.Count > 0)
        {
            <ul class="nav flex-column @(nested ? "margin-left-1" : null)">
                @foreach (var childNode in node.ChildNodes)
                {
                    <li class="accordion-item">
                        <a class="@GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>

                        @{RenderSubLevelsRecursive(childNode, true);}
                    </li>
                }
            </ul>}
    }
}
@*Resolves the class that will be added for each node depending whether it is selected*@
@{Microsoft.AspNetCore.Html.IHtmlContent GetClass(PageViewModel node)
    {

        if (node.IsCurrentlyOpened)
        {
            return Html.HtmlSanitize("is-active");
        }

        return null;
    }
}

@{
    Microsoft.AspNetCore.Html.IHtmlContent GetAccordeonButtonStateClass(PageViewModel node)
    {
        if (!node.IsCurrentlyOpened && !node.HasChildOpen)
        {
            return Html.HtmlSanitize("");
        }

        return null;
    }

    Microsoft.AspNetCore.Html.IHtmlContent GetAccordeonContentStateClass(PageViewModel node)
    {
        if (node.IsCurrentlyOpened || node.HasChildOpen)
        {
            return Html.HtmlSanitize("is-active");
        }

        return null;
    }

    Microsoft.AspNetCore.Html.IHtmlContent IsActive(PageViewModel node)
    {
        if (node.IsCurrentlyOpened || node.HasChildOpen)
        {
            return Html.HtmlSanitize("true");
        }

        return Html.HtmlSanitize("false");
    }
}
<environment include="Development">
    <script src="ResourcePackages/Foundation/assets/dist/js/jquery.min.js" ></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.core.min.js" ></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.keyboard.min.js"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.accordion.min.js"></script>
</environment>
<environment exclude="Development">
    <script src="ResourcePackages/Foundation/assets/dist/js/jquery.min.js" ></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.core.min.js"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.keyboard.min.js"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.accordion.min.js"></script>
</environment>
