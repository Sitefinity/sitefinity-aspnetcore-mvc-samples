@using Progress.Sitefinity.AspNetCore.TagHelpers;
@using Progress.Sitefinity.AspNetCore.Widgets.Models.Navigation;

@model Progress.Sitefinity.AspNetCore.Widgets.Models.Navigation.NavigationViewModel

<environment include="Development">
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.keyboard.min.js" section-name="Bottom"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.box.min.js" section-name="Bottom"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.nest.min.js" section-name="Bottom"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.touch.min.js" section-name="Bottom"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.dropdownMenu.min.js" section-name="Bottom"></script>
    <script src="scripts/accordion.js" section-name="Bottom" assembly-ref="Progress.Sitefinity.AspNetCore.Widgets"></script>
</environment>
<environment exclude="Development">
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.keyboard.min.js" section-name="Bottom"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.box.min.js" section-name="Bottom"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.nest.min.js" section-name="Bottom"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.util.touch.min.js" section-name="Bottom"></script>
    <script src="ResourcePackages/Foundation/assets/dist/js/foundation.dropdownMenu.min.js" section-name="Bottom"></script>
    <script src="scripts/accordion.js" section-name="Bottom" assembly-ref="Progress.Sitefinity.AspNetCore.Widgets"></script>
</environment>

@{
    var navbarId = Html.GetUniqueId($"navbar");
}

<div class="@Model.WrapperCssClass">
    <nav @Html.BuildAttributes(Model.Attributes)>
        <div>
            <ul class="dropdown menu" data-dropdown-menu>
                    @foreach (var node in Model.Nodes)
                    {
                        RenderRootLevelNode(node);
                    }
                </ul>
        </div>
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@{ void RenderRootLevelNode(PageViewModel node)
    {
        if (node.ChildNodes.Count > 0)
        {
            var navbarDropdownId = Html.GetUniqueId($"navbarDropdownMenuLink-{node.Key}");
            <li class="@GetClass(node)">
                <a href="#" id='@navbarDropdownId' data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@node.Title</a>
                <ul class="menu" aria-labelledby='@navbarDropdownId'>
                    @{RenderSubLevelsRecursive(node);}
                </ul>
            </li>
        }
        else
        {
            <li >
                <a class="@GetClass(node)" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
            </li>
        }
    }
}

@*Here is specified the rendering for all child levels*@
@{ void RenderSubLevelsRecursive(PageViewModel node)
    {
        foreach (var childNode in node.ChildNodes)
        {
            if (childNode.ChildNodes.Count > 0)
            {
                <li>
                    <a class="@GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">
                        @childNode.Title
                    </a>
                    <ul class="menu">
                        @{RenderSubLevelsRecursive(childNode);}
                    </ul>
                </li>
            }
            else
            {
                <li>
                    <a class="@GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
                </li>
            }
        }
    }
}
@*Resolves the class that will be added for each node depending whether it is selected*@
@{Microsoft.AspNetCore.Html.IHtmlContent GetClass(PageViewModel node)
    {

        if (node.IsCurrentlyOpened)
        {
            return Html.HtmlSanitize("active");
        }

        return null;
    }
}
