@using Progress.Sitefinity.AspNetCore.TagHelpers;
@using Progress.Sitefinity.AspNetCore.Widgets.Models.Navigation;

@model Progress.Sitefinity.AspNetCore.Widgets.Models.Navigation.NavigationViewModel

<div class="@Model.WrapperCssClass">
    <nav @Html.BuildAttributes(Model.Attributes)>

        @{
            RenderRootLevelNode(@Model.Nodes);
            RenderSubLevelsRecursive(@Model.Nodes);
        }
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@{ void RenderRootLevelNode(IList<PageViewModel> nodes)
    {
        <ul class="tabs" data-tabs>
            @foreach (var node in nodes)
            {

                <li class="tabs-title @GetClass(node)">
                    <a @Html.Raw(GetAriaAttr(node)) href="@node.Url" target="@node.LinkTarget">@node.Title</a>
                </li>
            }
        </ul>
    }
}

@*Here is specified the rendering for all child levels*@
@{void RenderSubLevelsRecursive(IList<PageViewModel> nodes)
    {
        var selectedNode = nodes.SingleOrDefault(node => node.IsCurrentlyOpened || node.HasChildOpen);

        if (selectedNode != null)
        {
            <div class="tabs-content">
                <div class="tabs-panel @GetClass(selectedNode)">
                @foreach (var node in selectedNode.ChildNodes)
                {
                    <div><a @Html.Raw(GetAriaAttr(node)) href="@node.Url" target="@node.LinkTarget">@node.Title</a></div>
                }
                </div>
            </div>
            RenderSubLevelsRecursive(selectedNode.ChildNodes);
        }
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@{ Microsoft.AspNetCore.Html.IHtmlContent GetClass(PageViewModel node)
    {
        if (node.IsCurrentlyOpened)
        {
            return Html.HtmlSanitize("is-active");
        }
        else if (node.HasChildOpen)
        {
            return Html.HtmlSanitize("is-active");
        }

        return Html.HtmlSanitize("");
    }
}

@*Resolves the selected attribute that will be added for each node depending whether it is selected*@
@{
    Microsoft.AspNetCore.Html.IHtmlContent GetAriaAttr(PageViewModel node)
    {
        if (node.IsCurrentlyOpened)
        {
            return Html.HtmlSanitize("aria-selected='true'");
        }
        else if (node.HasChildOpen)
        {
            return Html.HtmlSanitize("aria-selected='true'");
        }

        return Html.HtmlSanitize("");
    }
}

