@using Progress.Sitefinity.AspNetCore.Mvc.Rendering;
@using Progress.Sitefinity.AspNetCore.Widgets.Models.DocumentList;

@model DocumentListViewModel
@{
	var wrapperCss = Model.GetFieldCss("Document table");
	var classAttr = string.IsNullOrEmpty(wrapperCss) ? null : wrapperCss;
}

<div class="@classAttr @Model.WrapperCssClass" @Html.BuildAttributes(Model.Attributes)>
	@if (Model.Items.Count > 0)
	{
		<table class="unstriped">
			<thead>
				<tr class="row">
					<th class="small-5 columns border-secondary"><span class="text-bold">@Model.TitleColumnLabel</span></th>
					<th class="small-2 columns border-secondary"><span class="text-bold">@Model.TypeColumnLabel</span></th>
					<th class="small-2 columns border-secondary text-right"><span class="text-bold">@Model.SizeColumnLabel</span></th>
					<th class="small-1 columns border-secondary"></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Model.Items)
				{
					var title = Model.GetFieldValue<string>(item, "Title");
					var fileSize = Model.GetFileSize(item);
					var extension = Model.GetExtension(item);
					var url = Model.GetFieldValue<string>(item, "Url");

					<tr class="row">
						<td>
							<div class="grid-x grid-padding-x align-start">
								<div class="position-relative small-1">
									<svg xmlns="http://www.w3.org/2000/svg" width="24" viewBox="0 0 384 512" fill="#a7acb1">
										<path d="M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm160-14.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"></path>
									</svg>
									<span style="transform: translate(-30%, -50%); color: white; background-color: @GetFileExtensionCssClass(extension)"
										  class="sc-file-icon-extension text-uppercase">@extension</span>
								</div>
								<div class="small-1 align-self-middle">
									@if (title != null)
									{
										var itemUrl = Model.GetItemUrl(this.Context, item);

										<div class="text-break">
											@if (itemUrl != null && Model.RenderLinks)
											{
												<a href="@itemUrl.ToString()">@Html.HtmlSanitize(title)</a>
											}
											else
											{
												@Html.HtmlSanitize(title)
											}
										</div>
									}
								</div>
							</div>
						</td>
						<td>
							<span>@extension</span>
						</td>
						<td class="text-right">
							<span>@fileSize</span>
						</td>
						<td class="text-right">
							<a href="@url" target="_blank">@Model.DownloadLinkLabel</a>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}

	@if (Model.Pager != null)
	{
		<div>
			@await Html.PartialAsync("ContentPager", Model.Pager)
		</div>
	}
</div>

@functions {
	string GetFileExtensionCssClass(String extension)
	{
		string color;

		switch (extension)
		{
			case "xlsx":
			case "xls":
				color = "#198754";
				break;
			case "doc":
			case "docx":
				color = "#0D6EFD";
				break;
			case "ppt":
			case "pptx":
				color = "#FD7E14";
				break;
			case "pdf":
				color = "#DC3545";
				break;
			case "zip":
			case "rar":
				color = "#6f42c1";
				break;
			default:
				color = "#6C757D";
				break;
		}

		return color;
	}
}
