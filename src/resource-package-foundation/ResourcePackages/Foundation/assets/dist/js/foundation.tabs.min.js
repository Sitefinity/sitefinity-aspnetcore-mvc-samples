import t from "jquery"; import { Plugin as e } from "./foundation.core.plugin"; import { onLoad as i } from "./foundation.core.utils"; import { Keyboard as s } from "./foundation.util.keyboard"; import { onImagesLoaded as a } from "./foundation.util.imageLoader"; class Tabs extends e { _setup(e, i) { this.$element = e, this.options = t.extend({}, Tabs.defaults, this.$element.data(), i), this.className = "Tabs", this._init(), s.register("Tabs", { ENTER: "open", SPACE: "open", ARROW_RIGHT: "next", ARROW_UP: "previous", ARROW_DOWN: "next", ARROW_LEFT: "previous" }) } _init() { var e = this; if (this._isInitializing = !0, this.$element.attr({ role: "tablist" }), this.$tabTitles = this.$element.find(`.${this.options.linkClass}`), this.$tabContent = t(`[data-tabs-content="${this.$element[0].id}"]`), this.$tabTitles.each(function () { var s = t(this), a = s.find("a"), n = s.hasClass(`${e.options.linkActiveClass}`), l = a.attr("data-tabs-target") || a[0].hash.slice(1), o = a[0].id ? a[0].id : `${l}-label`, h = t(`#${l}`); s.attr({ role: "presentation" }), a.attr({ role: "tab", "aria-controls": l, "aria-selected": n, id: o, tabindex: n ? "0" : "-1" }), h.attr({ role: "tabpanel", "aria-labelledby": o }), n && (e._initialAnchor = `#${l}`), n || h.attr("aria-hidden", "true"), n && e.options.autoFocus && (e.onLoadListener = i(t(window), function () { t("html, body").animate({ scrollTop: s.offset().top }, e.options.deepLinkSmudgeDelay, () => { a.focus() }) })) }), this.options.matchHeight) { var s = this.$tabContent.find("img"); s.length ? a(s, this._setHeight.bind(this)) : this._setHeight() } this._checkDeepLink = () => { var e = window.location.hash; if (!e.length) { if (this._isInitializing) return; this._initialAnchor && (e = this._initialAnchor) } var i = e.indexOf("#") >= 0 ? e.slice(1) : e, s = i && t(`#${i}`), a = e && this.$element.find(`[href$="${e}"],[data-tabs-target="${i}"]`).first(); if (s.length && a.length) { if (s && s.length && a && a.length ? this.selectTab(s, !0) : this._collapse(), this.options.deepLinkSmudge) { var n = this.$element.offset(); t("html, body").animate({ scrollTop: n.top - this.options.deepLinkSmudgeOffset }, this.options.deepLinkSmudgeDelay) } this.$element.trigger("deeplink.zf.tabs", [a, s]) } }, this.options.deepLink && this._checkDeepLink(), this._events(), this._isInitializing = !1 } _events() { this._addKeyHandler(), this._addClickHandler(), this._setHeightMqHandler = null, this.options.matchHeight && (this._setHeightMqHandler = this._setHeight.bind(this), t(window).on("changed.zf.mediaquery", this._setHeightMqHandler)), this.options.deepLink && t(window).on("hashchange", this._checkDeepLink) } _addClickHandler() { var e = this; this.$element.off("click.zf.tabs").on("click.zf.tabs", `.${this.options.linkClass}`, function (i) { i.preventDefault(), e._handleTabChange(t(this)) }) } _addKeyHandler() { var e = this; this.$tabTitles.off("keydown.zf.tabs").on("keydown.zf.tabs", function (i) { if (9 !== i.which) { var a, n, l = t(this), o = l.parent("ul").children("li"); o.each(function (i) { if (t(this).is(l)) { e.options.wrapOnKeys ? (a = 0 === i ? o.last() : o.eq(i - 1), n = i === o.length - 1 ? o.first() : o.eq(i + 1)) : (a = o.eq(Math.max(0, i - 1)), n = o.eq(Math.min(i + 1, o.length - 1))); return } }), s.handleKey(i, "Tabs", { open: function () { l.find('[role="tab"]').focus(), e._handleTabChange(l) }, previous: function () { a.find('[role="tab"]').focus(), e._handleTabChange(a) }, next: function () { n.find('[role="tab"]').focus(), e._handleTabChange(n) }, handled: function () { i.preventDefault() } }) } }) } _handleTabChange(t, e) { if (t.hasClass(`${this.options.linkActiveClass}`)) { this.options.activeCollapse && this._collapse(); return } var i = this.$element.find(`.${this.options.linkClass}.${this.options.linkActiveClass}`), s = t.find('[role="tab"]'), a = s.attr("data-tabs-target"), n = a && a.length ? `#${a}` : s[0].hash, l = this.$tabContent.find(n); this._collapseTab(i), this._openTab(t), this.options.deepLink && !e && (this.options.updateHistory ? history.pushState({}, "", n) : history.replaceState({}, "", n)), this.$element.trigger("change.zf.tabs", [t, l]), l.find("[data-mutate]").trigger("mutateme.zf.trigger") } _openTab(t) { var e = t.find('[role="tab"]'), i = e.attr("data-tabs-target") || e[0].hash.slice(1), s = this.$tabContent.find(`#${i}`); t.addClass(`${this.options.linkActiveClass}`), e.attr({ "aria-selected": "true", tabindex: "0" }), s.addClass(`${this.options.panelActiveClass}`).removeAttr("aria-hidden") } _collapseTab(e) { t(`#${e.removeClass(`${this.options.linkActiveClass}`).find('[role="tab"]').attr({ "aria-selected": "false", tabindex: -1 }).attr("aria-controls")}`).removeClass(`${this.options.panelActiveClass}`).attr({ "aria-hidden": "true" }) } _collapse() { var t = this.$element.find(`.${this.options.linkClass}.${this.options.linkActiveClass}`); t.length && (this._collapseTab(t), this.$element.trigger("collapse.zf.tabs", [t])) } selectTab(t, e) { 0 > (i = "object" == typeof t ? t[0].id : t).indexOf("#") ? s = `#${i}` : (s = i, i = i.slice(1)); var i, s, a = this.$tabTitles.has(`[href$="${s}"],[data-tabs-target="${i}"]`).first(); this._handleTabChange(a, e) } _setHeight() { var e = 0, i = this; this.$tabContent && this.$tabContent.find(`.${this.options.panelClass}`).css("min-height", "").each(function () { var s = t(this), a = s.hasClass(`${i.options.panelActiveClass}`); a || s.css({ visibility: "hidden", display: "block" }); var n = this.getBoundingClientRect().height; a || s.css({ visibility: "", display: "" }), e = n > e ? n : e }).css("min-height", `${e}px`) } _destroy() { this.$element.find(`.${this.options.linkClass}`).off(".zf.tabs").hide().end().find(`.${this.options.panelClass}`).hide(), this.options.matchHeight && null != this._setHeightMqHandler && t(window).off("changed.zf.mediaquery", this._setHeightMqHandler), this.options.deepLink && t(window).off("hashchange", this._checkDeepLink), this.onLoadListener && t(window).off(this.onLoadListener) } } Tabs.defaults = { deepLink: !1, deepLinkSmudge: !1, deepLinkSmudgeDelay: 300, deepLinkSmudgeOffset: 0, updateHistory: !1, autoFocus: !1, wrapOnKeys: !0, matchHeight: !1, activeCollapse: !1, linkClass: "tabs-title", linkActiveClass: "is-active", panelClass: "tabs-panel", panelActiveClass: "is-active" }; export { Tabs };
