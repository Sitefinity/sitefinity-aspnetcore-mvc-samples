@using Progress.Sitefinity.AspNetCore.Mvc.Rendering;
@using Progress.Sitefinity.AspNetCore.Widgets.Models.DocumentList;

@model DocumentListViewModel
@{
	var wrapperCss = Model.GetFieldCss("Document list");
	var classAttr = string.IsNullOrEmpty(wrapperCss) ? null : wrapperCss;
}

<div class="@classAttr @Model.WrapperCssClass" @Html.BuildAttributes(Model.Attributes)>
	@foreach (var item in Model.Items)
	{
		var title = Model.GetFieldValue<string>(item, "Title");
		var fileSize = Model.GetFileSize(item);
		var extension = Model.GetExtension(item);
		var url = Model.GetFieldValue<string>(item, "Url");

		<div>
			<div>
				<svg xmlns="http://www.w3.org/2000/svg" width="36" viewBox="0 0 384 512" fill="#a7acb1">
					<path d="M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm160-14.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"></path>
				</svg>
				<span>@extension</span>
			</div>
			<div class="flex-grow-1">
				@if (title != null)
				{
					var itemUrl = Model.GetItemUrl(this.Context, item);

					<div>
						@if (itemUrl != null && Model.RenderLinks)
						{
							<a href="@itemUrl.ToString()">@Html.HtmlSanitize(title)</a>
						}
						else
						{
							@Html.HtmlSanitize(title)
						}
						<span>(@extension)</span>
					</div>
				}
				<div>
					<a href="@url" target="_blank">@Model.DownloadLinkLabel</a>
					<span>(@fileSize)</span>
				</div>
			</div>
		</div>
	}

	@if (Model.Pager != null)
	{
		<div>
			@await Html.PartialAsync("ContentPager", Model.Pager)
		</div>
	}
</div>
